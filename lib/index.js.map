{"version":3,"sources":["../src/index.jsx"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["// @flow\n/* eslint-disable react/no-multi-comp */\n\nimport React from 'react';\nimport classnames from 'classnames';\nimport Children from 'react-children-utilities';\n\nimport type {\n    FormComponent,\n    SelfValidatingFormProps,\n    FieldComponent,\n    TouchableFieldProps,\n    CustomFieldComponent,\n    TouchableCustomFieldProps,\n    TouchableFieldState,\n} from './index.types';\n\nexport const SelfValidating = (Form: FormComponent) =>\n    class SelfValidatingForm extends React.Component<SelfValidatingFormProps, {\n        endCheckValidity: boolean,\n    }> {\n        state = {\n            endCheckValidity: false,\n        };\n        customFields = {\n            count: 0,\n            valid: true,\n        };\n        lastSubmit = null;\n        handleSubmit: (SyntheticInputEvent<HTMLFormElement>) => void;\n        handleEndCheckValidity: (boolean) => void;\n\n        constructor(props: SelfValidatingFormProps) {\n            super(props);\n            this.handleSubmit = this.handleSubmit.bind(this);\n            this.handleEndCheckValidity = this.handleEndCheckValidity.bind(this);\n        }\n\n        handleSubmit(ev: SyntheticInputEvent<HTMLFormElement>) {\n            ev.preventDefault();\n            if (ev.target.checkValidity() && this.customFields.count === 0) {\n                this.props.onSubmit(ev);\n            } else if (this.customFields.count) {\n                ev.persist();\n                this.lastSubmit = ev;\n                this.setState({endCheckValidity: true});\n            }\n        }\n\n        handleEndCheckValidity(valid: boolean) {\n            this.setState({endCheckValidity: false});\n            this.customFields.count--;\n            this.customFields.valid = valid && this.customFields.valid;\n            if (\n                this.customFields.count === 0\n                && this.customFields.valid\n                && this.lastSubmit\n                && this.lastSubmit.target.checkValidity()\n            ) {\n                this.props.onSubmit(this.lastSubmit);\n            }\n        }\n\n        render() {\n            let count = 0;\n            const children = Children.deepMap(React.Children.toArray(this.props.children), (child) => {\n                if (child.type && child.type.name === 'TouchableCustomField') {\n                    count++;\n                    return React.cloneElement(child, {\n                        endCheckValidity: this.state.endCheckValidity,\n                        onEndCheckValidity: this.handleEndCheckValidity,\n                    });\n                }\n                return child;\n            });\n\n            this.customFields.count = count;\n            this.customFields.valid = true;\n\n            return (\n                <Form\n                    noValidate\n                    {...this.props}\n                    onSubmit={this.handleSubmit}\n                >{children}</Form>\n            );\n        }\n    };\n\n/**\n * For standard fields or those that are built on top of them\n */\nexport const Touchable = (Field: FieldComponent) =>\n    class TouchableField extends React.Component<TouchableFieldProps, TouchableFieldState> {\n        static defaultProps = {\n            onChange: () => {},\n            onInvalid: () => {},\n        };\n\n        handleChange: (SyntheticInputEvent<HTMLInputElement>) => void;\n        handleInvalid: (SyntheticEvent<HTMLInputElement>) => void;\n\n        constructor(props: TouchableFieldProps) {\n            super(props);\n            this.state = {\n                touched: false,\n                invalid: false,\n            };\n            this.handleChange = this.handleChange.bind(this);\n            this.handleInvalid = this.handleInvalid.bind(this);\n        }\n\n        handleChange(ev: SyntheticInputEvent<HTMLInputElement>) {\n            this.setState({touched: true, invalid: !ev.target.validity.valid});\n            this.props.onChange(ev);\n        }\n\n        handleInvalid(ev: SyntheticEvent<HTMLInputElement>) {\n            this.setState({touched: true, invalid: true});\n            this.props.onInvalid(ev);\n        }\n\n        render() {\n            return (\n                <Field\n                    {...this.props}\n                    className={classnames(this.props.className, {\n                        'touched': this.state.touched,\n                        'invalid': this.state.invalid,\n                    })}\n                    onChange={this.handleChange}\n                    onInvalid={this.handleInvalid}\n                />\n            );\n        }\n    };\n\n/**\n * For fields that don't fire `invalid` events or their `onChange` property does\n * not pass `change` events\n */\nexport const TouchableCustom = (Field: CustomFieldComponent) =>\n    class TouchableCustomField extends React.Component<\n        TouchableCustomFieldProps, TouchableFieldState\n    > {\n        static defaultProps = {\n            onInvalid: () => {},\n            onValidityChange: () => {},\n            onEndCheckValidity: () => {},\n            endCheckValidity: false,\n        };\n\n        handleValidityChange: (boolean) => void;\n        handleEndCheckValidity: (boolean) => void;\n\n        constructor(props: TouchableCustomFieldProps) {\n            super(props);\n            this.state = {\n                touched: false,\n                invalid: false,\n            };\n            this.handleValidityChange = this.handleValidityChange.bind(this);\n            this.handleEndCheckValidity = this.handleEndCheckValidity.bind(this);\n        }\n\n        handleValidityChange(valid: boolean) {\n            this.setState({touched: true, invalid: !valid});\n            if (this.state.invalid !== !valid) { // Assuming state is not updated immediately\n                this.props.onValidityChange(valid);\n            }\n        }\n\n        handleEndCheckValidity(valid: boolean) {\n            this.handleValidityChange(valid);\n            if (!valid) {\n                this.props.onInvalid();\n            }\n            this.props.onEndCheckValidity(valid);\n        }\n\n        render() {\n            return (\n                <Field\n                    {...this.props}\n                    className={classnames(this.props.className, {\n                        'touched': this.state.touched,\n                        'invalid': this.state.invalid,\n                    })}\n                    onValidityChange={this.handleValidityChange}\n                    onEndCheckValidity={this.handleEndCheckValidity}\n                    endCheckValidity={this.props.endCheckValidity}\n                />\n            );\n        }\n    };\n\nexport default {SelfValidating, Touchable};\n"]}