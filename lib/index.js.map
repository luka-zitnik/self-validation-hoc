{"version":3,"sources":["../src/index.jsx"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["// @flow\n/* eslint-disable react/no-multi-comp */\n\nimport React from 'react';\nimport classnames from 'classnames';\n\nimport type {\n    FormComponent,\n    SelfValidatingFormProps,\n    FieldComponent,\n    TouchableFieldProps,\n    CustomFieldComponent,\n    TouchableCustomFieldProps,\n    TouchableFieldState,\n    Config,\n} from './index.types';\n\nfunction deepMap(children, deepMapFn) {\n    return React.Children\n    .map(children, (child) => {\n        if (child && child.props && child.props.children\n            && typeof child.props.children === 'object') {\n                // Clone the child that has children and map them too\n                return deepMapFn(React.cloneElement(child, {\n                    ...child.props,\n                    children: deepMap(child.props.children, deepMapFn),\n                }));\n            }\n            return deepMapFn(child);\n        });\n}\n\nexport const SelfValidating = (Form: FormComponent) =>\n    class SelfValidatingForm extends React.Component<SelfValidatingFormProps, {\n        endCheckValidity: boolean,\n    }> {\n        state = {\n            endCheckValidity: false,\n        };\n        customFields = {\n            count: 0,\n            valid: true,\n        };\n        lastSubmit = null;\n        handleSubmit: (SyntheticInputEvent<HTMLFormElement>) => void;\n        handleEndCheckValidity: (boolean) => void;\n\n        constructor(props: SelfValidatingFormProps) {\n            super(props);\n            this.handleSubmit = this.handleSubmit.bind(this);\n            this.handleEndCheckValidity = this.handleEndCheckValidity.bind(this);\n        }\n\n        handleSubmit(ev: SyntheticInputEvent<HTMLFormElement>) {\n            ev.preventDefault();\n            if (ev.target.checkValidity() && this.customFields.count === 0) {\n                this.props.onSubmit(ev);\n            } else if (this.customFields.count) {\n                ev.persist();\n                this.lastSubmit = ev;\n                this.setState({endCheckValidity: true});\n            }\n        }\n\n        handleEndCheckValidity(valid: boolean) {\n            this.setState({endCheckValidity: false});\n            this.customFields.count--;\n            this.customFields.valid = valid && this.customFields.valid;\n            if (\n                this.customFields.count === 0\n                && this.customFields.valid\n                && this.lastSubmit\n                && this.lastSubmit.target.checkValidity()\n            ) {\n                this.props.onSubmit(this.lastSubmit);\n            }\n        }\n\n        render() {\n            let count = 0;\n            const children = deepMap(this.props.children, (child) => {\n                if (child && child.type && child.type.name === 'TouchableCustomField') {\n                    count++;\n                    return React.cloneElement(child, {\n                        endCheckValidity: this.state.endCheckValidity,\n                        onEndCheckValidity: this.handleEndCheckValidity,\n                    });\n                }\n                return child;\n            });\n\n            this.customFields.count = count;\n            this.customFields.valid = true;\n\n            return (\n                <Form\n                    noValidate\n                    {...this.props}\n                    onSubmit={this.handleSubmit}\n                >{children}</Form>\n            );\n        }\n    };\n\nconst defaultConfig = {\n    touchedClassName: 'touched',\n    invalidClassName: 'invalid',\n};\n\n/**\n * For standard fields or those that are built on top of them\n */\nexport const Touchable = (config: Config = defaultConfig) => (Field: FieldComponent) =>\n    class TouchableField extends React.Component<TouchableFieldProps, TouchableFieldState> {\n        static defaultProps = {\n            onChange: () => {},\n            onInvalid: () => {},\n            inputRef: () => {},\n        };\n\n        input: HTMLInputElement;\n        handleChange: (SyntheticInputEvent<HTMLInputElement>) => void;\n        handleInvalid: (SyntheticEvent<HTMLInputElement>) => void;\n        handleInputRef: (HTMLInputElement) => void;\n\n        constructor(props: TouchableFieldProps) {\n            super(props);\n            this.state = {\n                touched: false,\n                invalid: false,\n                value: props.value || '',\n            };\n            this.handleChange = this.handleChange.bind(this);\n            this.handleInvalid = this.handleInvalid.bind(this);\n            this.handleInputRef = this.handleInputRef.bind(this);\n        }\n\n        componentWillReceiveProps(nextProps: TouchableFieldProps) {\n            this.setState({value: nextProps.value});\n        }\n\n        componentDidUpdate() {\n            if (this.state.touched && this.input && this.input.validity && this.state.invalid === this.input.validity.valid) {\n                this.setState({invalid: !this.input.validity.valid});\n            }\n        }\n\n        handleChange(ev: SyntheticInputEvent<HTMLInputElement>) {\n            this.setState({touched: true, invalid: !ev.target.validity.valid, value: ev.target.value});\n            this.props.onChange(ev);\n        }\n\n        handleInvalid(ev: SyntheticEvent<HTMLInputElement>) {\n            this.setState({touched: true, invalid: true});\n            this.props.onInvalid(ev);\n        }\n\n        handleInputRef(input: HTMLInputElement) {\n            this.input = input;\n            this.props.inputRef(input);\n        }\n\n        render() {\n            return (\n                <Field\n                    {...this.props}\n                    className={classnames(this.props.className, {\n                        [config.touchedClassName || defaultConfig.touchedClassName]: this.state.touched,\n                        [config.invalidClassName || defaultConfig.invalidClassName]: this.state.invalid,\n                    })}\n                    onChange={this.handleChange}\n                    onInvalid={this.handleInvalid}\n                    inputRef={this.handleInputRef}\n                    value={this.state.value}\n                />\n            );\n        }\n    };\n\n/**\n * For fields that don't fire `invalid` events or their `onChange` property does\n * not pass `change` events\n */\nexport const TouchableCustom = (config: Config = defaultConfig) => (Field: CustomFieldComponent) =>\n    class TouchableCustomField extends React.Component<\n        TouchableCustomFieldProps, TouchableFieldState\n    > {\n        static defaultProps = {\n            onInvalid: () => {},\n            onValidityChange: () => {},\n            onEndCheckValidity: () => {},\n            endCheckValidity: false,\n        };\n\n        handleValidityChange: (boolean) => void;\n        handleEndCheckValidity: (boolean) => void;\n\n        constructor(props: TouchableCustomFieldProps) {\n            super(props);\n            this.state = {\n                touched: false,\n                invalid: false,\n            };\n            this.handleValidityChange = this.handleValidityChange.bind(this);\n            this.handleEndCheckValidity = this.handleEndCheckValidity.bind(this);\n        }\n\n        handleValidityChange(valid: boolean) {\n            this.setState({touched: true, invalid: !valid});\n            if (this.state.invalid === valid) { // Assuming state is not updated immediately\n                this.props.onValidityChange(valid);\n            }\n        }\n\n        handleEndCheckValidity(valid: boolean) {\n            this.handleValidityChange(valid);\n            if (!valid) {\n                this.props.onInvalid();\n            }\n            this.props.onEndCheckValidity(valid);\n        }\n\n        render() {\n            return (\n                <Field\n                    {...this.props}\n                    className={classnames(this.props.className, {\n                        [config.touchedClassName || defaultConfig.touchedClassName]: this.state.touched,\n                        [config.invalidClassName || defaultConfig.invalidClassName]: this.state.invalid,\n                    })}\n                    onValidityChange={this.handleValidityChange}\n                    onEndCheckValidity={this.handleEndCheckValidity}\n                    endCheckValidity={this.props.endCheckValidity}\n                />\n            );\n        }\n    };\n\nexport default {SelfValidating, Touchable, TouchableCustom};\n"]}